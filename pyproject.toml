[build-system]
requires = ["setuptools>=70.0.0", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "premedpro-ai"
version = "0.1.0"
authors = [
    {name = "PremedPro AI Team", email = "team@premedpro-ai.com"},
]
description = "Hybrid Neuro-Symbolic Medical AI System"
readme = "README.md"
requires-python = ">=3.10,<4.0"
keywords = ["neuro-symbolic", "medical-ai", "ethical-ai", "privacy", "healthcare"]
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core Python dependencies
    "attrs>=23.2.0",
    "setuptools>=70.0.0",
    "toml>=0.10.2",
    "pyyaml>=6.0.1",
    "loguru>=0.7.3",
    "aiohttp>=3.11.13",
    "asyncio-mqtt>=0.16.2",
    "natsort>=8.3.1",
    "tqdm>=4.66.3",
    "python-box>=7.1.1",
    "click>=8.1.7",
    
    # Data processing and scientific computing
    "numpy>=1.26.4,<=2.1.3",
    "pandas>=2.2.2",
    "scipy>=1.11.0",
    "sympy>=1.12",
    "scikit-learn>=1.5.0",
    
    # Neural networks and deep learning
    "torch>=2.2.2",
    "torchaudio>=2.2.2",
    "torchvision>=0.17.2",
    "transformers>=4.45.2",
    "accelerate>=0.33.0",
    # "sentencepiece>=0.2.0",  # Temporarily disabled due to macOS compilation issues
    "sentence-transformers>=2.5.1",
    "tiktoken>=0.8.0",
    
    # API and web framework
    "fastapi>=0.104.1",
    "uvicorn>=0.24.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    
    # LLM providers (optional)
    "openai>=1.60.0",
    "anthropic>=0.43.1",
    "google-genai>=1.16.1",
    
    # Document processing
    "pypdf>=4.3.0",
    "beautifulsoup4>=4.12.3",
    "tika>=2.6.0",
    
    # Development and interactive
    "ipython>=8.24.0",
    "jupyter>=1.0.0",
    
    # Cryptography and privacy
    "cryptography>=41.0.0",
    "pynacl>=1.5.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    
    # Julia integration (optional)
    "julia>=0.6.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.3.1",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.0.0",
    "isort>=5.13.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "coverage>=7.3.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-autorefs>=0.5.0",
    "mkdocstrings[python]>=0.24.0",
]

# Testing dependencies  
testing = [
    "pytest>=8.3.1",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]

# Julia mathematical foundation
julia = [
    "julia>=0.6.0",
    "diffeqpy>=2.0.0",
]

# Full installation with all optional dependencies  
all = [
    "pytest>=8.3.1",
    "pytest-asyncio>=0.23.0", 
    "black>=23.0.0",
    "isort>=5.13.0",
    "mkdocs>=1.5.0",
    "julia>=0.6.0",
]

[project.urls]
Homepage = "https://github.com/premedpro-ai/premedpro-ai"
Documentation = "https://docs.premedpro-ai.com"
Repository = "https://github.com/premedpro-ai/premedpro-ai.git"
Issues = "https://github.com/premedpro-ai/premedpro-ai/issues"

[project.scripts]
premedpro-ai = "core.hybrid_bridge:main"
ethical-audit = "ethical_audit.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "math_foundation*", "orchestration*", "utils*"]

[tool.poetry]
package-mode = false

[tool.setuptools_scm]
write_to = "_version.py"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude OSS submodules
  core/symbolic/(nstk|nucleoid|peirce)/.*
  | core/neural/(torchlogic|symbolicai)/.*
  | orchestration/openssa/.*
  | \.git
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
extend_skip_glob = [
    "core/symbolic/nstk/*",
    "core/symbolic/nucleoid/*", 
    "core/symbolic/peirce/*",
    "core/neural/torchlogic/*",
    "core/neural/symbolicai/*",
    "orchestration/openssa/*",
]

# pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "core/tests",
    "utils/testing",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "julia: marks tests that require Julia",
    "rust: marks tests that require Rust components",
]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "core/symbolic/(nstk|nucleoid|peirce)/.*",
    "core/neural/(torchlogic|symbolicai)/.*", 
    "orchestration/openssa/.*",
    "build/.*",
    "dist/.*",
]

# Coverage configuration
[tool.coverage.run]
source = ["core", "math_foundation", "orchestration", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*_test.py",
    "core/symbolic/nstk/*",
    "core/symbolic/nucleoid/*",
    "core/symbolic/peirce/*", 
    "core/neural/torchlogic/*",
    "core/neural/symbolicai/*",
    "orchestration/openssa/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 